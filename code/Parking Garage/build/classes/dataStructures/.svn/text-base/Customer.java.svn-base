package dataStructures;

import java.sql.*;
import java.util.ArrayList;
import database.*;
import databases.*;

/**
 * @author Brian
 *
 */
public class Customer extends Database{
	/*Variables*/
	private int customerID;
	private String customerName;
	private float currentBalance;
	private ArrayList<Integer> carIDs;
	private int currentReservation; //-1 for no current Reservation
	private ArrayList<Integer> upcomingReservations;
	private ArrayList<Integer> pastReservations;
	
	/*Constructor*/
	public Customer(){		
	}
	//everything known
	public Customer(int cID, String cName, float cBalance, 
			ArrayList<Integer> cIDs, int cReservation, 
			ArrayList<Integer> uReservations, 
			ArrayList<Integer> pReservations){
		customerID=cID;
		customerName=cName;
		currentBalance=cBalance;
		carIDs=cIDs;
		currentReservation=cReservation;
		upcomingReservations=uReservations;
		pastReservations=pReservations;
	}
	/*	Purpose:	Constructor a new Customer
	 * 	Input:		Only name
	 * 	Output:		Customer Object
	 * */
	public Customer(String name) throws SQLException{
		customerName = name;
		currentBalance=0;
		currentReservation = 0;
		carIDs = new ArrayList<Integer>();
		upcomingReservations = new ArrayList<Integer>();
		pastReservations = new ArrayList<Integer>();
		
		//create new user ID
		stmt.executeUpdate(
				" INSERT INTO Customers " +
				" (customerName, currentBalance) " + 
				" VALUES ('" + name + "',0);");
		
		//get customerID
		rs=stmt.executeQuery("SELECT MAX(customerID) FROM Customers");
		rs.next();
		customerID=rs.getInt(1);
	}
	
	/*Functions that edit Customer and Database*/
	/*	Purpose:	Update Database value
	 * 	Input: 		new balance
	 * 	Output		true if successful
	 * */
	public boolean updateBalance(float newBalance) throws ClassNotFoundException, SQLException{
		currentBalance = newBalance;
		stmt.executeUpdate(""+
				" UPDATE Customers " +
				" SET currentBalance=" + newBalance + 
				" WHERE customerID= " + customerID);
		return true;
	}
	protected boolean updateReservation (int reservationID) throws ClassNotFoundException, SQLException{
		int newRes = Database_Helpers.numReservations(Database_Constructors.ID_to_Customer(customerID))+1;
		stmt.executeUpdate("" +
				" UPDATE Customers " +
				" SET upcomingReservationID"+newRes+"="+reservationID +
				" WHERE CustomerID="+customerID);	
		return true;
	}
	protected boolean deleteReservation (int reservationID) throws ClassNotFoundException, SQLException{
		//get from database the reservations		
		int upResNum=0;
		for (int i=1; i<=3; i++){
			if (upcomingReservations.get(i)==reservationID){
				upResNum=i;
				break;
			}
		}
		if(upResNum==0){
			return false;
		}
		else{
			
			return true;
		}
	}
	
	/*	Purpose:	Add a car to the customer
	 * 	Input:		Car ID
	 * 	Output:		true if successful
	 * 				if too many cars, remove the last one
	 * */
	public boolean addCar(int cID) throws ClassNotFoundException, SQLException{
		//add car, but see if there are too many, if there is, delete last one
		if (carIDs.size()>=5){
			Car c = Database_Constructors.ID_to_Car(carIDs.get(4));
			c.removeCustomer(customerID);
			carIDs.set(4, cID);
		}
		else{
			carIDs.add(cID);
		}
		int location = carIDs.size();
		//update database		
		stmt.executeUpdate(""+
				" UPDATE Customers " +
				" SET carID"+location+"=" + cID + 
				" WHERE customerID= " + customerID);
		
		return true;
	}
	
	/*	Purpose:	Remove a car from a customer
	 * 	Input:		CarID
	 * 	Output:		true is successful
	 * 	How:		Deletes the car reference
	 * 				Removes car from Customer database
	 * 				Go to the Car database and makes changes
	 * */
	public boolean removeCar (int cID) throws ClassNotFoundException, SQLException{
		//error - not enough cars
		if (carIDs.size()==0){
			return false;
		}
		else{
			//delete the object in the Car database
			Car temp3 = Database_Constructors.ID_to_Car(cID);
			temp3.removeCustomer(customerID);
			//edit this object
			int location = carIDs.lastIndexOf(cID);
			System.out.println("Location: "+location);
			carIDs.remove(location);
			System.out.println(carIDs);
			
			String temp="";
			//update database
			System.out.println("size: " + carIDs.size());
			for (int i=1;i<=5;i++){
				if(i>=carIDs.size()){
					temp="NULL";
				}
				else if(carIDs.get(i-1)==0||carIDs.get(i-1)==null){
					temp="NULL";
				}
				else{
					temp=String.format("%d", carIDs.get(i-1));
				}
				stmt.executeUpdate("" +
						" UPDATE Customers " +
						" SET carID" + i+"= " + temp + 
						" WHERE customerID= " + customerID);
			}
		}
		return true;
	}
	
	/*Functions that Return Customer Values*/
	public int getCustomerID(){
		return customerID;
	}
	public String getCustomerName(){
		return customerName;
	}
	public double getCurrentBalance(){
		return currentBalance;
	}
	public ArrayList<Car> getCars() throws ClassNotFoundException, SQLException{
		ArrayList<Car> temp = new ArrayList<Car>();
		for (int i=0; i<3; i++){
			temp.add(Database.carID_to_Car(carIDs.get(i)));
		}
		return temp;
	}
	public ArrayList<Integer> getCarIDs() throws ClassNotFoundException, SQLException{
		return carIDs;
	}
	public Reservation getCurrentReservation() throws ClassNotFoundException, SQLException{
		return Database.reservationID_to_Reservation(currentReservation);
	}
	public ArrayList<Reservation> getUpcomingReservations() throws ClassNotFoundException, SQLException{
		//return upcomingReservations; 
		//for returning an ArrayList of Reservations and not Integers
		ArrayList<Reservation> temp = new ArrayList<Reservation>();
		for (int i=0; i<3; i++){
			temp.add(Database.reservationID_to_Reservation(upcomingReservations.get(i)));
		}
		return temp;
	}
	public ArrayList<Integer> getUpcomingReservationsID()  throws ClassNotFoundException, SQLException{
		return upcomingReservations;
	}
	public ArrayList<Reservation> getPastReservations() throws ClassNotFoundException, SQLException{
		ArrayList<Reservation> temp = new ArrayList<Reservation>();
		for (int i=0; i<3; i++){
			temp.add(Database.reservationID_to_Reservation(pastReservations.get(i)));
		}
		return temp;
	}
}
